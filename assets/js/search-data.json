{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About&#182; . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter&#182; . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts&#182; . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair&#182; . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown&#182; . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips&#182; . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips&#182; . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables&#182; . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images&#182; . Local Images&#182; . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images&#182; . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs&#182; . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions&#182; . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements&#182; . Tweetcards&#182; . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos&#182; . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts&#182; . Typing &gt; Warning: There will be no second warning! will render this: Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: Note: A doc link to an example website: fast.ai should also work fine. . Footnotes&#182; . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://rbracco.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Title",
            "content": "# &quot;Essential Markdown&quot; &gt; &quot;A quick summary of the most useful markdown&quot; - toc: true - branch: master - badges: true - comments: true - categories: [fastpages, jupyter] - image: images/some_folder/your_image.png - metadata_key1: metadata_value1 - metadata_key2: metadata_value2 . Essential Markdown&#182; . The most important thing to know is that you do not need to know markdown to successfully use Jupyter notebook. That being said it will make it easier if you want to add more than just plaintext explanations to your code. . I&#39;ve included below the most useful features of markdown so you can see how it works. If you want to see the markdown I used to acheive a certain effect, double click the cell to enter Edit Mode, and then hit shift-enter to see the rendered version. . This is your book, feel free to color all over it. Change the markdown and see what works and what doesn&#39;t. If you mess something up and can&#39;t fix it, just download a new copy! . #, ##, ###... ###### for headings&#182; . Starting a markdown cell with # will turn any text that follows into a large header, or &lt;h1&gt; for those familiar with HTML. ## will give you a slightly smaller one, all the way down to ######. Headers are essential for structuring your content and making it easier to read. . This is a size 4 header, I made it using #### at the cell start&#182; . ` and for formatted code&#182; . You can include code in markdown cells (it just won&#39;t be run by the Python interpreter) with formatting, just wrap it in a single backtick for inline code like this: x = y**2 + 4 or with 3 backticks for multiline code like this . def sum(x,y): return x+y . You can optionally include a language (e.g. python, javascript...etc) after the backticks, and it will be formatted more nicely according to the rules of that language! . def sum(x,y): return x+y . * for italics and ** for bold&#182; . Wrapping this phrase with single asterisks made it italic, and wrapping this one with two asterisks makes it bold . - for unordered lists&#182; . Starting a line with a hyphen and space will make it into an unordered list item. Here&#39;s what you need to know . This starts with a hyphen and a space You can have sublists by putting two spaces before the hyphen | . | Don&#39;t worry about retaining all of this | It will come naturally with time | . If you forget the space after the hyphen, it won&#39;t work . -Item 1 -Item 2 -Item 3 . 1. for ordered lists&#182; . This is a very cool feature. If you want an ordered list, just start all lines of that list with 1. Shouldn&#39;t it be 1. then 2. then 3.? No, markdown will automatically count for you, and then if you need to edit your list and insert something in the middle, you won&#39;t have to change all the numbers. Like unordered lists, you can have sublists by indenting two spaces. . First | Second | Third Third Sub Item 1 | Third Sub Item 2 Wow another sublist? | | | Fourth | Note that you can also mix ordered and unordered lists as you please . First unordered sublist 1 | unordered sublist 2 | . | Second ordered sublist 1 | ordered sublist 2 | | [description](url) for links&#182; . The easiest way to get a link is just type the URL like this https://www.economist.com/business/2018/10/27/new-schemes-teach-the-masses-to-build-ai but the result isn&#39;t pretty. The proper way to do it is to start with a description wrapped in brackets, and a url wrapped in parenthesis. Here&#39;s an example: Great article about fastai . If you can remember the components, but have trouble with the order, note that it&#39;s in alphabetical order Brackets-Description-Parenthesis-URL . ![description](url) to embed images&#182; . If you noticed, I included a few images and even a GIF earlier in this section. That&#39;s done the exact same way as links, but with a ! to tell Jupyter that it&#39;s an image to be loaded here. . I can load a local image of my dog by using the filepath as the url . Or I can load a remote image of someone else&#39;s dog by using the images url . to escape markdown&#182; . When markdown adopts all these different symbols (*, `, #) what do we do when we want to display a real asterisk, backtick, or hashtag? We use the escape character . This means putting a backslash before that symbol so that markdown knows we don&#39;t want italics, we just want to show *. . As long as the symbol after the backslash is part of markdown, the backslash won&#39;t appear. If in the rare case you need to actually display a backslash and then some markdown, like this *, you&#39;ll need to escape the backslash and the asterisk, An easier option is just wrap it in backticks, like so * and then you won&#39;t need to escape both. . Newlines and new paragraphs&#182; . Just getting text to display on a new line, or getting a new paragraph to start, can be surprisingly tricky, even for those experienced in markdown. Here is what is essential to know . To display as a new line in the same paragraph, insert two spaces then insert a newline in markdown. | To display as a new paragraph, you need two newlines in markdown (hit enter twice). | Inserting a single newline with no spaces does nothing | This is confusing even to me, so let&#39;s see examples of each . No spaces + newline&#182; . After this I&#39;ll put no spaces, just a newline. Oh no! It&#39;s on the same line. . Two spaces + newline&#182; . After this I&#39;ll put two spaces, then a newline. Great, it works! . No spaces + two newlines&#182; . After this I&#39;ll put no spaces, but two newlines. . This makes a new paragraph. . Two spaces + two newlines&#182; . After this I&#39;ll put two spaces, and two newlines. . The spaces have no effect, but it still works. .",
            "url": "https://rbracco.github.io/blog/2020/02/20/Essential-Markdown.html",
            "relUrl": "/2020/02/20/Essential-Markdown.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Example Markdown Post",
            "content": "Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . You can include alert boxes …and… . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://rbracco.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://rbracco.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "",
          "content": "Warning . Do not manually save images into this folder. This is used by GitHub Actions to automatically copy images. Any images you save into this folder could be deleted at build time. .",
          "url": "https://rbracco.github.io/blog/images/copied_from_nb/",
          "relUrl": "/images/copied_from_nb/",
          "date": ""
      }
      
  

  
  

}